--ddl

CREATE TABLE Planes
(
Id INT PRIMARY KEY IDENTITY,
[Name] VARCHAR(30) NOT NULL,
Seats INT NOT NULL,
[Range]	INT NOT NULL
)

CREATE TABLE Flights
(
Id INT PRIMARY KEY IDENTITY,
DepartureTime DATETIME,
ArrivalTime DATETIME,
Origin VARCHAR(50) NOT NULL,
Destination VARCHAR(50) NOT NULL,
PlaneId INT FOREIGN KEY REFERENCES Planes(Id) NOT NULL
)

CREATE TABLE Passengers
(
Id INT PRIMARY KEY IDENTITY,
FirstName VARCHAR(30) NOT NULL,
LastName VARCHAR(30) NOT NULL,
Age INT NOT NULL,
[Address] VARCHAR(30) NOT NULL,
PassportId CHAR(11) NOT NULL
)


CREATE TABLE LuggageTypes
(
Id INT PRIMARY KEY IDENTITY,
[Type] VARCHAR(30) NOT NULL
)

CREATE TABLE Luggages
(
Id INT PRIMARY KEY IDENTITY,
LuggageTypeId INT FOREIGN KEY REFERENCES LuggageTypes(Id) NOT NULL,
PassengerId INT FOREIGN KEY REFERENCES Passengers(Id) NOT NULL
)

CREATE TABLE Tickets
(
Id INT PRIMARY KEY IDENTITY,
PassengerId INT FOREIGN KEY REFERENCES Passengers(Id) NOT NULL,
FlightId INT FOREIGN KEY REFERENCES Flights(Id) NOT NULL,
LuggageId INT FOREIGN KEY REFERENCES Luggages(Id) NOT NULL,
Price DECIMAL(18,2) NOT NULL
)

--02.Insert

INSERT INTO Planes([Name], Seats, [Range])
VALUES
('Airbus 336',	112, 5132),
('Airbus 330',	432, 5325),
('Boeing 369',	231, 2355),
('Stelt 297',	254, 2143),
('Boeing 338',	165, 5111),
('Airbus 558',	387, 1342),
('Boeing 128',	345, 5541)


INSERT INTO LuggageTypes([Type])
VALUES
('Crossbody Bag'),
('School Backpack'),
('Shoulder Bag')

--03.Update

UPDATE Tickets
SET Price = Price + Price * 0.13
WHERE FlightId IN (SELECT Id FROM Flights WHERE Destination = 'Carlsbad')
--04.Delete

DELETE Tickets
WHERE FlightId IN (SELECT Id FROM Flights WHERE Destination = 'Ayn Halagim')

DELETE Flights
WHERE  Destination = 'Ayn Halagim'

--05. The "Tr" Planes
SELECT * FROM Planes
WHERE [Name] LIKE '%tr%'
ORDER BY Id, [Name], Seats, [Range]

--06. Flight Profits

SELECT t.FlightId, SUM(t.Price) AS Price FROM Flights f
JOIN Tickets t ON f.Id = t.FlightId
GROUP BY t.FlightId 
ORDER BY Price DESC, t.FlightId ASC

--07.Passenger Trips
SELECT CONCAT(p.FirstName, ' ', p.LastName) AS FullName, f.Origin, f.Destination FROM Passengers p
JOIN Tickets t ON t.PassengerId = p.Id
JOIN Flights f ON f.Id = t.FlightId
ORDER BY FullName, f.Origin, f.Destination

--08.Non Adventures People
SELECT p.FirstName, p.LastName, p.Age FROM Passengers p
LEFT JOIN Tickets t ON t.PassengerId = p.Id
WHERE t.Id IS NULL
ORDER BY p.Age DESC, p.FirstName ASC, p.LastName ASC

--09. Full Info

SELECT CONCAT(p.FirstName, ' ', p.LastName) AS [Full Name], 
	pl.[Name] AS [Plane Name] ,
	CONCAT(f.Origin, ' - ', f.Destination) AS Trip,
	lg.[Type] AS [Luggage Type]
FROM Passengers p
JOIN Tickets t ON p.Id = t.PassengerId
JOIN Flights f ON f.Id = t.FlightId
JOIN Planes pl ON pl.Id = f.PlaneId
JOIN Luggages l ON l.Id = t.LuggageId
JOIN LuggageTypes lg ON l.LuggageTypeId = lg.Id
ORDER BY [Full Name], [Plane Name], f.Origin, f.Destination, [Luggage Type]

--10.PSP
SELECT pl.[Name], pl.Seats, COUNT(p.Id) AS [Passengers Count] FROM Planes pl
LEFT JOIN Flights f ON pl.Id = f.PlaneId
LEFT JOIN Tickets t ON t.FlightId = f.Id
LEFT JOIN Passengers p ON t.PassengerId = p.Id
GROUP BY pl.[Name], pl.Seats
ORDER BY [Passengers Count] DESC, pl.[Name], pl.Seats

--11. Vacantion
CREATE FUNCTION udf_CalculateTickets(@origin VARCHAR(50), @destination VARCHAR(50), @peopleCount INT) 
RETURNS VARCHAR(MAX)
AS
BEGIN
IF(@peopleCount <= 0) RETURN 'Invalid people count!'

DECLARE @flight INT = (SELECT Id FROM Flights WHERE Origin = @origin AND Destination = @destination)

IF(@flight IS NULL) RETURN 'Invalid flight!'

DECLARE @totalPrice DECIMAL(18,2) = (SELECT Price FROM Tickets WHERE FlightId = @flight)

RETURN 'Total price ' + CAST(@totalPrice * @peopleCount AS VARCHAR)
END

--12. Wrong Data

CREATE PROC usp_CancelFlights
AS
BEGIN
 UPDATE Flights
 SET DepartureTime = NULL, ArrivalTime = NULL
 WHERE DepartureTime < ArrivalTime

 END
